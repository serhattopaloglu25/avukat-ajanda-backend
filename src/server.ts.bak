import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import dotenv from 'dotenv';
import { PrismaClient } from '@prisma/client';
import authRoutes from './routes/auth';
import meRoutes from './routes/me';
import clientRoutes from './routes/clients';
import caseRoutes from './routes/cases';

dotenv.config();

const app = express();
const prisma = new PrismaClient();
const PORT = process.env.PORT || 8000;

app.use(helmet());
app.use(cors({
  origin: process.env.CORS_ORIGIN?.split(',') || ['http://localhost:3000'],
  credentials: true
}));
app.use(express.json());

// Health check with DB
app.get('/health', async (req, res) => {
  try {
    await prisma.$queryRaw`SELECT 1`;
    res.json({ status: 'healthy', database: 'connected' });
  } catch (error) {
    res.status(503).json({ status: 'unhealthy', database: 'disconnected' });
  }
});

// Root
app.get('/', (req, res) => {
  res.json({ 
    message: 'AvukatAjanda API',
    version: '1.0.0',
    status: 'active'
  });
});

// Stats endpoint
app.get('/api/stats', async (req, res) => {
  try {
    const [users, clients, cases, activeCases] = await Promise.all([
      prisma.user.count(),
      prisma.client.count(),
      prisma.case.count(),
      prisma.case.count({ where: { status: 'active' } })
    ]);
    
    res.json({
      total_users: users,
      total_clients: clients,
      total_cases: cases,
      active_cases: activeCases
    });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch stats' });
  }
});

// Mount routes
app.use('/auth', authRoutes);
app.use('/me', meRoutes);
app.use('/api/clients', clientRoutes);
app.use('/api/cases', caseRoutes);

const server = app.listen(PORT, () => {
  console.log(`ðŸš€ Server running on port ${PORT}`);
});

process.on('SIGTERM', async () => {
  console.log('SIGTERM received, shutting down');
  server.close(() => {
    prisma.$disconnect();
  });
});

// Add at the top after imports
import versionRoutes from './routes/version';

// Initialize Sentry
if (process.env.SENTRY_DSN) {
    dsn: process.env.SENTRY_DSN,
    environment: process.env.NODE_ENV || 'development',
    integrations: [
    ],
    tracesSampleRate: 1.0,
  });
}

// Add after other middleware

// Add version endpoint
app.use('/version', versionRoutes);

// Add error handler at the end

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  name         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  clients      Client[]
  cases        Case[]
  events       Event[]
  
  // Existing relations (keep for backwards compatibility)
  memberships  Membership[]
  timeEntries  TimeEntry[]
  auditLogs    AuditLog[]
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  address   String?
  userId    Int
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  cases     Case[]
  
  // Existing fields (keep for backwards compatibility)
  orgId     Int?
  tcKimlik  String?
  vergiNo   String?
  invoices  Invoice[]
  updatedAt DateTime @default(now()) @updatedAt
  
  @@index([userId])
}

model Case {
  id        Int      @id @default(autoincrement())
  caseNo    String   @unique
  title     String
  status    String   @default("active")
  clientId  Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  client    Client   @relation(fields: [clientId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  events    Event[]
  
  // Existing fields (keep for backwards compatibility)
  orgId       Int?
  court       String?
  description String?
  nextHearing DateTime?
  documents   Document[]
  files       CaseFile[]
  timeEntries TimeEntry[]
  expenses    Expense[]
  advances    Advance[]
  
  @@index([userId])
  @@index([clientId])
}

model Event {
  id        Int       @id @default(autoincrement())
  title     String
  type      String    @default("hearing")
  caseId    Int?
  userId    Int
  startsAt  DateTime
  endsAt    DateTime?
  location  String?
  notes     String?
  createdAt DateTime  @default(now())
  
  // Relations
  case      Case?     @relation(fields: [caseId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  
  // Existing fields (keep for backwards compatibility)
  orgId     Int?
  startAt   DateTime?
  endAt     DateTime?
  createdBy User?     @relation("EventCreatedBy", fields: [createdById], references: [id])
  createdById Int?
  updatedAt DateTime @default(now()) @updatedAt
  
  @@index([userId])
  @@index([caseId])
}

// Keep all existing models for backwards compatibility
model Organization {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  address   String?
  phone     String?
  taxNo     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  memberships Membership[]
  clients     Client[]
  cases       Case[]
  events      Event[]
  invoices    Invoice[]
  templates   Template[]
  documents   Document[]
  expenses    Expense[]
  advances    Advance[]
  auditLogs   AuditLog[]
}

model Membership {
  id        Int      @id @default(autoincrement())
  userId    Int
  orgId     Int
  role      String   @default("member")
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User         @relation(fields: [userId], references: [id])
  org  Organization @relation(fields: [orgId], references: [id])
  
  @@unique([userId, orgId])
}

model Invoice {
  id           Int       @id @default(autoincrement())
  orgId        Int
  clientId     Int
  invoiceNo    String
  date         DateTime
  dueDate      DateTime?
  amount       Decimal   @db.Money
  tax          Decimal?  @db.Money
  totalAmount  Decimal   @db.Money
  status       String    @default("draft")
  items        Json?
  notes        String?
  paidAt       DateTime?
  createdBy    Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  org     Organization @relation(fields: [orgId], references: [id])
  client  Client       @relation(fields: [clientId], references: [id])
  creator User         @relation(fields: [createdBy], references: [id])
  
  @@index([orgId, status])
  @@index([clientId])
}

model Template {
  id        Int      @id @default(autoincrement())
  orgId     Int
  name      String
  fields    Json
  bodyMd    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  org Organization @relation(fields: [orgId], references: [id])
}

model Document {
  id         Int      @id @default(autoincrement())
  orgId      Int
  caseId     Int?
  clientId   Int?
  key        String
  name       String
  mimeType   String
  size       Int
  uploadedBy Int
  createdAt  DateTime @default(now())
  
  org    Organization @relation(fields: [orgId], references: [id])
  case   Case?        @relation(fields: [caseId], references: [id])
  client Client?      @relation(fields: [clientId], references: [id])
  
  @@index([orgId])
  @@index([caseId])
  @@index([clientId])
}

model CaseFile {
  id        Int      @id @default(autoincrement())
  caseId    Int
  name      String
  path      String
  mimeType  String
  size      Int
  createdAt DateTime @default(now())
  
  case Case @relation(fields: [caseId], references: [id])
}

model TimeEntry {
  id          Int       @id @default(autoincrement())
  userId      Int
  caseId      Int
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  rate        Decimal?  @db.Money
  currency    String    @default("TRY")
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user User @relation(fields: [userId], references: [id])
  case Case @relation(fields: [caseId], references: [id])
  
  @@index([userId])
  @@index([caseId])
}

model Expense {
  id          Int      @id @default(autoincrement())
  caseId      Int
  type        String
  description String?
  amount      Decimal  @db.Money
  currency    String   @default("TRY")
  date        DateTime
  createdAt   DateTime @default(now())
  
  case Case @relation(fields: [caseId], references: [id])
}

model Advance {
  id        Int      @id @default(autoincrement())
  caseId    Int
  amount    Decimal  @db.Money
  currency  String   @default("TRY")
  date      DateTime
  notes     String?
  createdAt DateTime @default(now())
  
  case Case @relation(fields: [caseId], references: [id])
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  orgId      Int
  userId     Int?
  action     String
  entityType String
  entityId   String?
  meta       Json?
  ip         String?
  ua         String?
  createdAt  DateTime @default(now())
  
  org  Organization @relation(fields: [orgId], references: [id])
  user User?        @relation(fields: [userId], references: [id])
  
  @@index([orgId, createdAt])
  @@index([userId])
}